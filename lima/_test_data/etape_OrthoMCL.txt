Les scripts OrthoMCL ont été exécutés dans un dossier my_orthomcl_dir.
OrthoMCL est téléchargeable ici:
	http://orthomcl.org/common/downloads/software/v2.0/
(1) install or get access to a supported relational database.  If using MySql, certain configurations are required, so it may involve working with your MySql administrator or installing your own MySql.  See the mysqlInstallationGuide.txt document provided with the orthomcl software.
    J’ai installé MySQL sur mon propre ordinateur et j’ai créé une base de donnée appelée « orthomcl ».
(2) download and install the mcl program according to provided instructions.
    Lien de téléchargement : http://www.micans.org/mcl/src/mcl-latest.tar.gz
    Décompressé dans le dossier : orthomcl/mcl-14-137/
(3) install and configure the OrthoMCL suite of programs.
    La configuration demande de créer un fichier orthomcl.config : my_orthomcl_dir/orthomcl.config
(4) run orthomclInstallSchema to install the required schema into the database.
    Dossier : my_orthomcl_dir
    Commande :
		../orthomclInstallSchema orthomcl.config
    Le script crée des tables dans la base de données « orthomcl » de MySQL. Voici les tables créées :
		+--------------------+
		| Tables_in_orthomcl |
		+--------------------+
		| CoOrtholog         |
		| InParalog          |
		| InterTaxonMatch    |
		| Ortholog           |
		| SimilarSequences   |
		+--------------------+
(5) run orthomclAdjustFasta (or your own simple script) to generate protein fasta files in the required format.
    Dossier : my_orthomcl_dir/compliantFasta
    Commandes :
        ../../orthomclAdjustFasta albu ../proteines-fichiers-initiaux/Albugo_laibachii.ENA1.21.pep.all.fa 1
        ../../orthomclAdjustFasta hyal ../proteines-fichiers-initiaux/Hyaloperonospora_arabidopsidis.HyaAraEmoy2_2.0.21.pep.all.fa 1
        ../../orthomclAdjustFasta phca ../proteines-fichiers-initiaux/Phyca11_filtered_proteins.fasta 3
        ../../orthomclAdjustFasta phci ../proteines-fichiers-initiaux/Phyci1_GeneCatalog_proteins_20120612.aa.fasta 3
        ../../orthomclAdjustFasta phin ../proteines-fichiers-initiaux/Phytophthora_infestans.ASM14294v1.21.pep.all.fa 1
        ../../orthomclAdjustFasta phpa ../proteines-fichiers-initiaux/phytophthora_parasitica_inra-310_2_proteins.fasta 1
        ../../orthomclAdjustFasta phra ../proteines-fichiers-initiaux/Phytophthora_ramorum.ASM14973v1.21.pep.all.fa 1
        ../../orthomclAdjustFasta phso ../proteines-fichiers-initiaux/Phytophthora_sojae.ASM14975v1.21.pep.all.fa 1
        ../../orthomclAdjustFasta pyul ../proteines-fichiers-initiaux/Pythium_ultimum.pug.21.pep.all.fa 1
    Sorties : dossier my_orthomcl_dir/compliantFasta :
        albu.fasta
        hyal.fasta
        phca.fasta
        phci.fasta
        phin.fasta
        phpa.fasta
        phra.fasta
        phso.fasta
        pyul.fasta
(6) run orthomclFilterFasta to filter away poor quality proteins, and optionally remove alternative proteins. Creates a single large goodProteins.fasta file (and a poorProteins.fasta file)
    Dossier : my_orthomcl_dir
    Commande :
		../orthomclFilterFasta compliantFasta/ 10 20
    Sortie : dossier my_orthomcl_dir
		goodProteins.fasta
		poorProteins.fasta
(7) run all-v-all NCBI BLAST on goodProteins.fasta (output format is tab delimited text).
	Comme convenu, voici la stratégie adoptée à cette étape :
		créer une base de données regroupant toutes les protéines des 9 espèces étudiées.
		exécuter blast avec chaque espèce contre la base de données.
		fusionner les sorties obtenues dans un seul fichier.
	Pour le faire, on voulait initialement utiliser NCBI Toolkit, qui fournit les programmes « formatdb » et « blastall ».
	J’ai pu utiliser « formatdb », mais « blastall » ne fournissait pas l’option « -m 8″ pour formater la sortie de BLAST.
	Or la dernière version de BLAST (version 2.2.29+) fournit non seulement le programme « blastp » avec l’option « -outfmt 6″ équivalente de « -m 8″, mais aussi le programme « makeblastdb » équivalent de « formatdb ».
	Donc j’ai décidé d’utiliser carrément la dernière version de BLAST du début à la fin, pour être sûr que tous les fichiers manipulés seront compatibles.
	Lien de téléchargement de la dernière version de BLAST :
		ftp://ftp.ncbi.nlm.nih.gov/blast/executables/LATEST/
	Les binaires ont été décompressés dans le dossier my_orthomcl_dir/travailBLAST/bin
	Création de la base de données :
		Dossier my_orthomcl_dir/travailBLAST/blastDatabase
		Commande :
			../bin/makeblastdb -dbtype prot -in ../../goodProteins.fasta -input_type fasta -title goodProteinsBlastDB -hash_index -out goodProteinsBlastDB
		Sortie : dossier my_orthomcl_dir/travailBLAST/blastDatabase
			goodProteinsBlastDB.phd
			goodProteinsBlastDB.pin
			goodProteinsBlastDB.psi
			goodProteinsBlastDB.phi
			goodProteinsBlastDB.pog
			goodProteinsBlastDB.psq
			goodProteinsBlastDB.phr
			goodProteinsBlastDB.psd
	exécution de BLAST pour chaque espèce contre la même base de données :
		Cette étape a été effectuée sur les machines du DIRO.
		Exécution :
			Dossier travailBLAST/blastDatabase
			Commande :
				./lancement-clusters.sh
			Le script « lancement-clusters.sh » lance 9 scripts qui exécutent chacun BLAST pour une espèce spécifique.
			Les 9 scripts lancés sont (dans le même dossier travailBLAST/blastDatabase) :
				script-albu.sh
				script-hyal.sh
				script-phca.sh
				script-phci.sh
				script-phin.sh
				script-phpa.sh
				script-phra.sh
				script-phso.sh
				script-pyul.sh
			Contenu total (concaténé) des 9 scripts :
				../bin/blastp -query ../../compliantFasta/albu.fasta -db goodProteinsBlastDB -out ../blastOut/albu.out.blast -evalue 10 -outfmt 6 -seg yes -num_threads 2 > sortie-albu.txt 2> erreur-albu.txt
				echo fin albu >> sortie-albu.txt
				../bin/blastp -query ../../compliantFasta/hyal.fasta -db goodProteinsBlastDB -out ../blastOut/hyal.out.blast -evalue 10 -outfmt 6 -seg yes -num_threads 2 > sortie-hyal.txt 2> erreur-hyal.txt
				echo fin hyal >> sortie-hyal.txt
				../bin/blastp -query ../../compliantFasta/phca.fasta -db goodProteinsBlastDB -out ../blastOut/phca.out.blast -evalue 10 -outfmt 6 -seg yes -num_threads 2 > sortie-phca.txt 2> erreur-phca.txt
				echo fin phca >> sortie-phca.txt
				../bin/blastp -query ../../compliantFasta/phci.fasta -db goodProteinsBlastDB -out ../blastOut/phci.out.blast -evalue 10 -outfmt 6 -seg yes -num_threads 2 > sortie-phci.txt 2> erreur-phci.txt
				echo fin phci >> sortie-phci.txt
				../bin/blastp -query ../../compliantFasta/phin.fasta -db goodProteinsBlastDB -out ../blastOut/phin.out.blast -evalue 10 -outfmt 6 -seg yes -num_threads 2 > sortie-phin.txt 2> erreur-phin.txt
				echo fin phin >> sortie-phin.txt
				../bin/blastp -query ../../compliantFasta/phpa.fasta -db goodProteinsBlastDB -out ../blastOut/phpa.out.blast -evalue 10 -outfmt 6 -seg yes -num_threads 2 > sortie-phpa.txt 2> erreur-phpa.txt
				echo fin phpa >> sortie-phpa.txt
				../bin/blastp -query ../../compliantFasta/phra.fasta -db goodProteinsBlastDB -out ../blastOut/phra.out.blast -evalue 10 -outfmt 6 -seg yes -num_threads 2 > sortie-phra.txt 2> erreur-phra.txt
				echo fin phra >> sortie-phra.txt
				../bin/blastp -query ../../compliantFasta/phso.fasta -db goodProteinsBlastDB -out ../blastOut/phso.out.blast -evalue 10 -outfmt 6 -seg yes -num_threads 2 > sortie-phso.txt 2> erreur-phso.txt
				echo fin phso >> sortie-phso.txt
				../bin/blastp -query ../../compliantFasta/pyul.fasta -db goodProteinsBlastDB -out ../blastOut/pyul.out.blast -evalue 10 -outfmt 6 -seg yes -num_threads 2 > sortie-pyul.txt 2> erreur-pyul.txt
				echo fin pyul >> sortie-pyul.txt
			Sorties finales :
				Dossier travailBLAST/blastDatabase
					Fichiers sortie-[espece].txt et erreur-[espece].txt pour chacune des 9 espèces.
					Tous les fichiers sortie-*.txt contenaient « fin [espèce] ».
					Seuls deux fichiers erreur-*.txt contenaient du texte : erreur-phca.txt et erreur-phci.txt. Contenu de ces deux fichiers :
						Warning: lcl|Query_887 phca|109327: Warning: Could not calculate ungapped Karlin-Altschul parameters due to an invalid query sequence or its translation. Please verify the query sequence(s) and/or filtering options
						Warning: lcl|Query_8449 phci|92918: Warning: Could not calculate ungapped Karlin-Altschul parameters due to an invalid query sequence or its translation. Please verify the query sequence(s) and/or filtering options
					Donc deux protéines au total ont été ignorées :
						phca|109327
						phci|92918
				Dossier travailBLAST/blastOut
					Fichiers [espece].out.blast
						Voir l’archive blastOut.tar.gz
	Concaténation des fichiers de sortie de BLASTP
		Commande :
			cat *.out.blast > superFile.out.blast (2,3 Go).
		travailBLAST/blastOut/superFile.out.blast est donc le fichier final de cette étape !
(8) run orthomclBlastParser on the NCBI BLAST tab output to create a file of similarities in the required format
    Dossier : my_orthomcl_dir
    Commande :
        ../orthomclBlastParser travailBLAST/blastOut/superFile.out.blast compliantFasta/ > similarSequences.txt
    Sortie : dossier my_orthomcl_dir
        Fichier similarSequences.txt (1,3 Go).
(9) run orthomclLoadBlast to load the output of orthomclBlastParser into the database.
    Dossier : my_orthomcl_dir
    Commande :
        ../orthomclLoadBlast orthomcl.config similarSequences.txt
    Sortie :
        Le script a apparemment travaillé sur les tables de la base de données MySQL « orthomcl ». Certaines tables ont été remplies.
        # Les autres tables ne contenaient aucune entrée à cette étape.
			mysql> SELECT COUNT(*) FROM InterTaxonMatch
			+----------+
			| COUNT(*) |
			+----------+
			| 18801550 |
			mysql> SELECT COUNT(*) FROM SimilarSequences;
			+----------+
			| COUNT(*) |
			+----------+
			| 22784385 |
			+----------+
	Problèmes rencontrés :
		Pour que cette étape fonctionne, il fallait que MySQL soit exécutée avec une option « local-infile ».
		Je n’ai pas trouvé du premier coup comment utiliser cette option ! Donc j’ai jonglé avec plusieurs versions de MySQL (version fournie par Ubuntu, qui semble compilée sans permettre l’option local-infile, et version que j’ai compilée moi-même sans succès!). Finalement j’avais plein de fichiers « mysql* » partout dans mon système et j’ai dû réinstaller complètement Linux pour avoir un système propre (j’ai remplacé Linux Mint basé sur Ubuntu par Linux Mint Debian Edition) !
		J’ai finalement trouvé la solution sur stackoverflow : http://stackoverflow.com/questions/13155057/load-local-infile-not-allowed-perl-mysql
		Il fallait modifier le fichier orthomcl.config et le fichier /etc/mysql/my.conf !
		Cette étape a duré plusieurs heures.
(10) run the orthomclPairs program to compute pairwise relationships.
	Dossier : my_orthomcl_dir
	Commandes :
		../orthomclPairs orthomcl.config orthomclPairs.logfile.txt cleanup=yes  > sortie-orthomcl-pairs.txt 2> erreurs-orthomcl-pairs.txt &
	L’exécution s’était arrêtée quand tout mon disque avait été rempli. Pour relancer l’exécution, j’ai utilisé la commande suivante :
		../orthomclPairs orthomcl.config orthomclPairs.logfile.txt cleanup=yes startAfter=useLog  > sortie-orthomcl-pairs.txt 2> erreurs-orthomcl-pairs.txt &
	Sortie : travail dans la base de données.
(11) run the orthomclDumpPairsFiles program to dump the pairs/ directory from the database
	Exécution dans le dossier my_orthomcl_dir.
	Sortie : dossier « pairs » et fichier « mclInput » téléchargeables ici (archive ZIP) : http://notoraptor.net/maitrise/donnees/?orthomcl/pairs-and-mcl-input.zip&type-ascending
(12) run the mcl program on the mcl_input.txt file created in Step 11.
	Exécution dans le dossier my_orthomcl_dir.
	Sortie : fichier mclOutput téléchargeable ici : http://notoraptor.net/maitrise/donnees/?orthomcl/mclOutput&type-ascending
	Le log de MCL pour cette étape est disponible ici : http://notoraptor.net/maitrise/donnees/?orthomcl/journal-mcl.txt&type-ascending
(13) run orthomclMclToGroups to convert mcl output to groups.txt
	Exécution dans le dossier my_orthomcl_dir.
	Sortie : Fichier final groups.txt : http://notoraptor.net/maitrise/donnees/?orthomcl/groups.txt&type-ascending !